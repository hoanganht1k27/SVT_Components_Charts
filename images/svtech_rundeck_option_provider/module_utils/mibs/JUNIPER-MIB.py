#
# PySNMP MIB module JUNIPER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///usr/share/snmp/mibs/mib-jnx-chassis.txt
# Produced by pysmi-0.3.2 at Mon Nov  5 17:19:08 2018
# On host Server platform Linux version 3.10.0-862.11.6.el7.x86_64 by user root
# Using Python version 2.7.5 (default, Jul 13 2018, 13:06:57) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
jnxChassisTraps, jnxMibs, jnxChassisOKTraps = mibBuilder.importSymbols("JUNIPER-SMI", "jnxChassisTraps", "jnxMibs", "jnxChassisOKTraps")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TimeStamp, TimeInterval, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TimeInterval", "TextualConvention", "DateAndTime")
jnxBoxAnatomy = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 1))
jnxBoxAnatomy.setRevisions(('2004-03-23 00:00', '2004-06-30 00:00', '2004-09-17 00:00', '2005-07-18 00:00', '2005-07-19 00:00', '2006-11-20 00:00', '2008-07-31 00:00', '2008-08-01 00:00', '2008-12-31 00:00', '2009-01-09 00:00', '2010-10-22 00:00', '2011-09-09 00:00', '2012-02-15 00:00', '2012-02-21 00:00', '2012-08-24 00:00', '2012-08-24 00:00', '2012-10-12 00:00', '2012-11-07 00:00', '2013-01-07 00:00', '2013-02-28 00:00', '2013-03-22 00:00', '2013-05-22 00:00', '2013-07-17 00:00', '2013-09-24 00:00', '2013-10-15 00:00', '2013-11-19 00:00', '2012-12-10 00:00', '2014-04-08 00:00', '2014-05-20 00:00', '2014-07-30 00:00', '2015-01-14 00:00', '2014-12-04 00:00', '2015-04-01 00:00', '2015-04-28 00:00', '2016-02-02 00:00', '2016-05-16 00:00',))
if mibBuilder.loadTexts: jnxBoxAnatomy.setLastUpdated('201605160000Z')
if mibBuilder.loadTexts: jnxBoxAnatomy.setOrganization('Juniper Networks, Inc.')
class JnxChassisId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42)
    namedValues = NamedValues(("unknown", 1), ("singleChassis", 2), ("scc", 3), ("lcc0", 4), ("lcc1", 5), ("lcc2", 6), ("lcc3", 7), ("jcs1", 8), ("jcs2", 9), ("jcs3", 10), ("jcs4", 11), ("node0", 12), ("node1", 13), ("sfc0", 14), ("sfc1", 15), ("sfc2", 16), ("sfc3", 17), ("sfc4", 18), ("lcc4", 19), ("lcc5", 20), ("lcc6", 21), ("lcc7", 22), ("lcc8", 23), ("lcc9", 24), ("lcc10", 25), ("lcc11", 26), ("lcc12", 27), ("lcc13", 28), ("lcc14", 29), ("lcc15", 30), ("member0", 31), ("member1", 32), ("member2", 33), ("member3", 34), ("member4", 35), ("member5", 36), ("member6", 37), ("member7", 38), ("nodeDevice", 39), ("interconnectDevice", 40), ("controlPlaneDevice", 41), ("directorDevice", 42))

jnxBoxClass = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxClass.setStatus('current')
jnxBoxDescr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxDescr.setStatus('current')
jnxBoxSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxSerialNo.setStatus('current')
jnxBoxRevision = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxRevision.setStatus('current')
jnxBoxInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxInstalled.setStatus('current')
jnxContainersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6), )
if mibBuilder.loadTexts: jnxContainersTable.setStatus('current')
jnxContainersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContainersIndex"))
if mibBuilder.loadTexts: jnxContainersEntry.setStatus('current')
jnxContainersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersIndex.setStatus('current')
jnxContainersView = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersView.setStatus('current')
jnxContainersLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersLevel.setStatus('current')
jnxContainersWithin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersWithin.setStatus('current')
jnxContainersType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersType.setStatus('current')
jnxContainersDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersDescr.setStatus('current')
jnxContainersCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersCount.setStatus('current')
jnxContentsLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsLastChange.setStatus('current')
jnxContentsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8), )
if mibBuilder.loadTexts: jnxContentsTable.setStatus('current')
jnxContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContentsContainerIndex"), (0, "JUNIPER-MIB", "jnxContentsL1Index"), (0, "JUNIPER-MIB", "jnxContentsL2Index"), (0, "JUNIPER-MIB", "jnxContentsL3Index"))
if mibBuilder.loadTexts: jnxContentsEntry.setStatus('current')
jnxContentsContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsContainerIndex.setStatus('current')
jnxContentsL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL1Index.setStatus('current')
jnxContentsL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL2Index.setStatus('current')
jnxContentsL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL3Index.setStatus('current')
jnxContentsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsType.setStatus('current')
jnxContentsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsDescr.setStatus('current')
jnxContentsSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsSerialNo.setStatus('current')
jnxContentsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsRevision.setStatus('current')
jnxContentsInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsInstalled.setStatus('current')
jnxContentsPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsPartNo.setStatus('current')
jnxContentsChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 11), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisId.setStatus('current')
jnxContentsChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisDescr.setStatus('current')
jnxContentsChassisCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisCleiCode.setStatus('current')
jnxContentsModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsModel.setStatus('current')
jnxLEDLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDLastChange.setStatus('deprecated')
jnxLEDTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10), )
if mibBuilder.loadTexts: jnxLEDTable.setStatus('deprecated')
jnxLEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxLEDAssociateTable"), (0, "JUNIPER-MIB", "jnxLEDAssociateIndex"), (0, "JUNIPER-MIB", "jnxLEDL1Index"), (0, "JUNIPER-MIB", "jnxLEDL2Index"), (0, "JUNIPER-MIB", "jnxLEDL3Index"))
if mibBuilder.loadTexts: jnxLEDEntry.setStatus('deprecated')
jnxLEDAssociateTable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("other", 1), ("jnxContainersTable", 2), ("jnxContentsTable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDAssociateTable.setStatus('deprecated')
jnxLEDAssociateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDAssociateIndex.setStatus('deprecated')
jnxLEDL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL1Index.setStatus('deprecated')
jnxLEDL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL2Index.setStatus('deprecated')
jnxLEDL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL3Index.setStatus('deprecated')
jnxLEDOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDOriginator.setStatus('deprecated')
jnxLEDDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDDescr.setStatus('deprecated')
jnxLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("other", 1), ("green", 2), ("yellow", 3), ("red", 4), ("blue", 5), ("amber", 6), ("off", 7), ("blinkingGreen", 8), ("blinkingYellow", 9), ("blinkingRed", 10), ("blinkingBlue", 11), ("blinkingAmber", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDState.setStatus('deprecated')
jnxLEDStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("blue", 1), ("green", 2), ("amber", 3), ("yellow", 4), ("red", 5), ("other", 6), ("off", 7), ("blinkingBlue", 8), ("blinkingGreen", 9), ("blinkingAmber", 10), ("blinkingYellow", 11), ("blinkingRed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDStateOrdered.setStatus('deprecated')
jnxFilledLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledLastChange.setStatus('current')
jnxFilledTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12), )
if mibBuilder.loadTexts: jnxFilledTable.setStatus('current')
jnxFilledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxFilledContainerIndex"), (0, "JUNIPER-MIB", "jnxFilledL1Index"), (0, "JUNIPER-MIB", "jnxFilledL2Index"), (0, "JUNIPER-MIB", "jnxFilledL3Index"))
if mibBuilder.loadTexts: jnxFilledEntry.setStatus('current')
jnxFilledContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledContainerIndex.setStatus('current')
jnxFilledL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL1Index.setStatus('current')
jnxFilledL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL2Index.setStatus('current')
jnxFilledL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL3Index.setStatus('current')
jnxFilledDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledDescr.setStatus('current')
jnxFilledState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("filled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledState.setStatus('current')
jnxFilledChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 7), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledChassisId.setStatus('current')
jnxFilledChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledChassisDescr.setStatus('current')
jnxOperatingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13), )
if mibBuilder.loadTexts: jnxOperatingTable.setStatus('current')
jnxOperatingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxOperatingContentsIndex"), (0, "JUNIPER-MIB", "jnxOperatingL1Index"), (0, "JUNIPER-MIB", "jnxOperatingL2Index"), (0, "JUNIPER-MIB", "jnxOperatingL3Index"))
if mibBuilder.loadTexts: jnxOperatingEntry.setStatus('current')
jnxOperatingContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingContentsIndex.setStatus('current')
jnxOperatingL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL1Index.setStatus('current')
jnxOperatingL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL2Index.setStatus('current')
jnxOperatingL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL3Index.setStatus('current')
jnxOperatingDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingDescr.setStatus('current')
jnxOperatingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("ready", 3), ("reset", 4), ("runningAtFullSpeed", 5), ("down", 6), ("standby", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingState.setStatus('current')
jnxOperatingTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingTemp.setStatus('current')
jnxOperatingCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingCPU.setStatus('current')
jnxOperatingISR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingISR.setStatus('current')
jnxOperatingDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingDRAMSize.setStatus('deprecated')
jnxOperatingBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingBuffer.setStatus('current')
jnxOperatingHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingHeap.setStatus('current')
jnxOperatingUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingUpTime.setStatus('deprecated')
jnxOperatingLastRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingLastRestart.setStatus('current')
jnxOperatingMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingMemory.setStatus('current')
jnxOperatingStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("running", 1), ("standby", 2), ("ready", 3), ("runningAtFullSpeed", 4), ("reset", 5), ("down", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingStateOrdered.setStatus('current')
jnxOperatingChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 17), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingChassisId.setStatus('current')
jnxOperatingChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingChassisDescr.setStatus('current')
jnxOperatingRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingRestartTime.setStatus('current')
jnxOperating1MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating1MinLoadAvg.setStatus('current')
jnxOperating5MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating5MinLoadAvg.setStatus('current')
jnxOperating15MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating15MinLoadAvg.setStatus('current')
jnxOperating1MinAvgCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating1MinAvgCPU.setStatus('current')
jnxOperating5MinAvgCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating5MinAvgCPU.setStatus('current')
jnxOperating15MinAvgCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating15MinAvgCPU.setStatus('current')
jnxOperatingFRUPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingFRUPower.setStatus('current')
jnxOperatingBufferCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingBufferCP.setStatus('current')
jnxOperatingMemoryCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingMemoryCP.setStatus('current')
jnxRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14), )
if mibBuilder.loadTexts: jnxRedundancyTable.setStatus('current')
jnxRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxRedundancyContentsIndex"), (0, "JUNIPER-MIB", "jnxRedundancyL1Index"), (0, "JUNIPER-MIB", "jnxRedundancyL2Index"), (0, "JUNIPER-MIB", "jnxRedundancyL3Index"))
if mibBuilder.loadTexts: jnxRedundancyEntry.setStatus('current')
jnxRedundancyContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyContentsIndex.setStatus('current')
jnxRedundancyL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL1Index.setStatus('current')
jnxRedundancyL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL2Index.setStatus('current')
jnxRedundancyL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL3Index.setStatus('current')
jnxRedundancyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyDescr.setStatus('current')
jnxRedundancyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyConfig.setStatus('current')
jnxRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyState.setStatus('current')
jnxRedundancySwitchoverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverCount.setStatus('current')
jnxRedundancySwitchoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverTime.setStatus('current')
jnxRedundancySwitchoverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("other", 1), ("neverSwitched", 2), ("userSwitched", 3), ("autoSwitched", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverReason.setStatus('current')
jnxRedundancyKeepaliveHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveHeartbeat.setStatus('current')
jnxRedundancyKeepaliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveTimeout.setStatus('current')
jnxRedundancyKeepaliveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveElapsed.setStatus('current')
jnxRedundancyKeepaliveLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveLoss.setStatus('current')
jnxRedundancyChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 15), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyChassisId.setStatus('current')
jnxRedundancyChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyChassisDescr.setStatus('current')
jnxFruTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15), )
if mibBuilder.loadTexts: jnxFruTable.setStatus('current')
jnxFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxFruContentsIndex"), (0, "JUNIPER-MIB", "jnxFruL1Index"), (0, "JUNIPER-MIB", "jnxFruL2Index"), (0, "JUNIPER-MIB", "jnxFruL3Index"))
if mibBuilder.loadTexts: jnxFruEntry.setStatus('current')
jnxFruContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruContentsIndex.setStatus('current')
jnxFruL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL1Index.setStatus('current')
jnxFruL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL2Index.setStatus('current')
jnxFruL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL3Index.setStatus('current')
jnxFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruName.setStatus('current')
jnxFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)).clone(namedValues=NamedValues(("other", 1), ("clockGenerator", 2), ("flexiblePicConcentrator", 3), ("switchingAndForwardingModule", 4), ("controlBoard", 5), ("routingEngine", 6), ("powerEntryModule", 7), ("frontPanelModule", 8), ("switchInterfaceBoard", 9), ("processorMezzanineBoardForSIB", 10), ("portInterfaceCard", 11), ("craftInterfacePanel", 12), ("fan", 13), ("lineCardChassis", 14), ("forwardingEngineBoard", 15), ("protectedSystemDomain", 16), ("powerDistributionUnit", 17), ("powerSupplyModule", 18), ("switchFabricBoard", 19), ("adapterCard", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruType.setStatus('current')
jnxFruSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruSlot.setStatus('current')
jnxFruState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("present", 3), ("ready", 4), ("announceOnline", 5), ("online", 6), ("anounceOffline", 7), ("offline", 8), ("diagnostic", 9), ("standby", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruState.setStatus('current')
jnxFruTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruTemp.setStatus('current')
jnxFruOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104)).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("error", 3), ("noPower", 4), ("configPowerOff", 5), ("configHoldInReset", 6), ("cliCommand", 7), ("buttonPress", 8), ("cliRestart", 9), ("overtempShutdown", 10), ("masterClockDown", 11), ("singleSfmModeChange", 12), ("packetSchedulingModeChange", 13), ("physicalRemoval", 14), ("unresponsiveRestart", 15), ("sonetClockAbsent", 16), ("rddPowerOff", 17), ("majorErrors", 18), ("minorErrors", 19), ("lccHardRestart", 20), ("lccVersionMismatch", 21), ("powerCycle", 22), ("reconnect", 23), ("overvoltage", 24), ("pfeVersionMismatch", 25), ("febRddCfgChange", 26), ("fpcMisconfig", 27), ("fruReconnectFail", 28), ("fruFwddReset", 29), ("fruFebSwitch", 30), ("fruFebOffline", 31), ("fruInServSoftUpgradeError", 32), ("fruChasdPowerRatingExceed", 33), ("fruConfigOffline", 34), ("fruServiceRestartRequest", 35), ("spuResetRequest", 36), ("spuFlowdDown", 37), ("spuSpi4Down", 38), ("spuWatchdogTimeout", 39), ("spuCoreDump", 40), ("fpgaSpi4LinkDown", 41), ("i3Spi4LinkDown", 42), ("cppDisconnect", 43), ("cpuNotBoot", 44), ("spuCoreDumpComplete", 45), ("rstOnSpcSpuFailure", 46), ("softRstOnSpcSpuFailure", 47), ("hwAuthenticationFailure", 48), ("reconnectFpcFail", 49), ("fpcAppFailed", 50), ("fpcKernelCrash", 51), ("spuFlowdDownNoCore", 52), ("spuFlowdCoreDumpIncomplete", 53), ("spuFlowdCoreDumpComplete", 54), ("spuIdpdDownNoCore", 55), ("spuIdpdCoreDumpIncomplete", 56), ("spuIdpdCoreDumpComplete", 57), ("spuCoreDumpIncomplete", 58), ("spuIdpdDown", 59), ("fruPfeReset", 60), ("fruReconnectNotReady", 61), ("fruSfLinkDown", 62), ("fruFabricDown", 63), ("fruAntiCounterfeitRetry", 64), ("fruFPCChassisClusterDisable", 65), ("spuFipsError", 66), ("fruFPCFabricDownOffline", 67), ("febCfgChange", 68), ("routeLocalizationRoleChange", 69), ("fruFpcUnsupported", 70), ("psdVersionMismatch", 71), ("fruResetThresholdExceeded", 72), ("picBounce", 73), ("badVoltage", 74), ("fruFPCReducedFabricBW", 75), ("fruAutoheal", 76), ("builtinPicBounce", 77), ("fruFabricDegraded", 78), ("fruFPCFabricDegradedOffline", 79), ("fruUnsupportedSlot", 80), ("fruRouteLocalizationMisCfg", 81), ("fruTypeConfigMismatch", 82), ("lccModeChanged", 83), ("hwFault", 84), ("fruPICOfflineOnEccErrors", 85), ("fruFpcIncompatible", 86), ("fruFpcFanTrayPEMIncompatible", 87), ("fruUnsupportedFirmware", 88), ("openflowConfigChange", 89), ("fruFpcScbIncompatible", 90), ("fruReUnresponsive", 91), ("hwError", 92), ("fruErrorManagerReqFPCReset", 93), ("fruIncompatibleWithPEM", 94), ("fruIncompatibleWithSIB", 95), ("sibIncompatibleWithOtherSIB", 96), ("fruPfeErrors", 97), ("vpnLocalizationRoleChange", 98), ("fruFpcFanTrayIncompatible", 99), ("fruFpcPEMIncompatible", 100), ("mixedSwitchFabric", 101), ("unsupportedFabric", 102), ("jamConfigError", 103), ("fruFpcHFanTrayIncompatible", 104)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruOfflineReason.setStatus('current')
jnxFruLastPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruLastPowerOff.setStatus('current')
jnxFruLastPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruLastPowerOn.setStatus('current')
jnxFruPowerUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruPowerUpTime.setStatus('current')
jnxFruChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 14), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruChassisId.setStatus('current')
jnxFruChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruChassisDescr.setStatus('current')
jnxFruPsdAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruPsdAssignment.setStatus('current')
jnxBoxKernelMemoryUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxKernelMemoryUsedPercent.setStatus('current')
jnxBoxSystemDomainType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("notApplicable", 1), ("rootSystemDomain", 2), ("protectedSystemDomain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxSystemDomainType.setStatus('current')
jnxBoxPersonality = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxPersonality.setStatus('current')
jnxPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 1)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxPowerSupplyFailure.setStatus('current')
jnxFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 2)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxFanFailure.setStatus('current')
jnxOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 3)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingTemp"))
if mibBuilder.loadTexts: jnxOverTemperature.setStatus('current')
jnxRedundancySwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 4)).setObjects(("JUNIPER-MIB", "jnxRedundancyContentsIndex"), ("JUNIPER-MIB", "jnxRedundancyL1Index"), ("JUNIPER-MIB", "jnxRedundancyL2Index"), ("JUNIPER-MIB", "jnxRedundancyL3Index"), ("JUNIPER-MIB", "jnxRedundancyDescr"), ("JUNIPER-MIB", "jnxRedundancyConfig"), ("JUNIPER-MIB", "jnxRedundancyState"), ("JUNIPER-MIB", "jnxRedundancySwitchoverCount"), ("JUNIPER-MIB", "jnxRedundancySwitchoverTime"), ("JUNIPER-MIB", "jnxRedundancySwitchoverReason"))
if mibBuilder.loadTexts: jnxRedundancySwitchover.setStatus('current')
jnxFruRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 5)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruRemoval.setStatus('current')
jnxFruInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 6)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruInsertion.setStatus('current')
jnxFruPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 7)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFruPowerOff.setStatus('current')
jnxFruPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 8)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFruPowerOn.setStatus('current')
jnxFruFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 9)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruFailed.setStatus('current')
jnxFruOffline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 10)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFruOffline.setStatus('current')
jnxFruOnline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 11)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruOnline.setStatus('current')
jnxFruCheck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 12)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruCheck.setStatus('current')
jnxFEBSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 13)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFEBSwitchover.setStatus('current')
jnxHardDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 14)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxHardDiskFailed.setStatus('current')
jnxHardDiskMissing = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 15)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxHardDiskMissing.setStatus('current')
jnxBootFromBackup = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 16)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxBootFromBackup.setStatus('current')
jnxFmLinkErr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 17)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFmLinkErr.setStatus('current')
jnxFmCellDropErr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 18)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFmCellDropErr.setStatus('current')
jnxExtSrcLockLost = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 19)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxExtSrcLockLost.setStatus('current')
jnxPlaneOffline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 20)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruLastPowerOn"))
if mibBuilder.loadTexts: jnxPlaneOffline.setStatus('current')
jnxPlaneOnline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 21)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxPlaneOnline.setStatus('current')
jnxPlaneCheck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 22)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxPlaneCheck.setStatus('current')
jnxPlaneFault = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 23)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxPlaneFault.setStatus('current')
jnxPowerSupplyInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 24)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxPowerSupplyInputFailure.setStatus('current')
jnxFmAsicErr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 25)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFmAsicErr.setStatus('current')
jnxMountVarOffHardDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 26)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxMountVarOffHardDiskFailed.setStatus('current')
jnxFmHealthChkErr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 27)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFmHealthChkErr.setStatus('current')
jnxPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 1)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxPowerSupplyOK.setStatus('current')
jnxFanOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 2)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxFanOK.setStatus('current')
jnxTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 3)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingTemp"))
if mibBuilder.loadTexts: jnxTemperatureOK.setStatus('current')
jnxFruOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 4)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruOK.setStatus('current')
jnxExtSrcLockAcquired = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 5)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxExtSrcLockAcquired.setStatus('current')
jnxHardDiskOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 6)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxHardDiskOK.setStatus('current')
jnxPowerSupplyInputOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 7)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxPowerSupplyInputOK.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-MIB", jnxContainersType=jnxContainersType, jnxFruPowerOff=jnxFruPowerOff, jnxOperatingDescr=jnxOperatingDescr, jnxFEBSwitchover=jnxFEBSwitchover, jnxFilledEntry=jnxFilledEntry, jnxFilledL3Index=jnxFilledL3Index, jnxContentsRevision=jnxContentsRevision, jnxRedundancyL2Index=jnxRedundancyL2Index, jnxLEDAssociateTable=jnxLEDAssociateTable, jnxRedundancyKeepaliveElapsed=jnxRedundancyKeepaliveElapsed, jnxBoxClass=jnxBoxClass, jnxRedundancyKeepaliveTimeout=jnxRedundancyKeepaliveTimeout, jnxLEDDescr=jnxLEDDescr, jnxFruChassisDescr=jnxFruChassisDescr, jnxRedundancyContentsIndex=jnxRedundancyContentsIndex, jnxLEDL3Index=jnxLEDL3Index, jnxHardDiskOK=jnxHardDiskOK, jnxContainersIndex=jnxContainersIndex, jnxRedundancyDescr=jnxRedundancyDescr, jnxOperatingEntry=jnxOperatingEntry, jnxOperating1MinAvgCPU=jnxOperating1MinAvgCPU, jnxBoxSerialNo=jnxBoxSerialNo, jnxOperatingUpTime=jnxOperatingUpTime, jnxHardDiskFailed=jnxHardDiskFailed, jnxOperating15MinAvgCPU=jnxOperating15MinAvgCPU, jnxRedundancyState=jnxRedundancyState, jnxFilledChassisDescr=jnxFilledChassisDescr, jnxContentsSerialNo=jnxContentsSerialNo, jnxFruL3Index=jnxFruL3Index, jnxLEDEntry=jnxLEDEntry, jnxFilledDescr=jnxFilledDescr, jnxRedundancySwitchoverReason=jnxRedundancySwitchoverReason, jnxFruOK=jnxFruOK, jnxOperatingBufferCP=jnxOperatingBufferCP, jnxFruFailed=jnxFruFailed, jnxTemperatureOK=jnxTemperatureOK, jnxRedundancyChassisDescr=jnxRedundancyChassisDescr, jnxExtSrcLockAcquired=jnxExtSrcLockAcquired, jnxOperatingTable=jnxOperatingTable, jnxContainersWithin=jnxContainersWithin, jnxLEDLastChange=jnxLEDLastChange, jnxRedundancySwitchover=jnxRedundancySwitchover, jnxFruTemp=jnxFruTemp, jnxRedundancyL3Index=jnxRedundancyL3Index, jnxFruL1Index=jnxFruL1Index, jnxRedundancyChassisId=jnxRedundancyChassisId, jnxFruEntry=jnxFruEntry, jnxFruState=jnxFruState, jnxContentsChassisCleiCode=jnxContentsChassisCleiCode, jnxPowerSupplyInputFailure=jnxPowerSupplyInputFailure, jnxFilledChassisId=jnxFilledChassisId, jnxFruOffline=jnxFruOffline, jnxPlaneOffline=jnxPlaneOffline, jnxFruCheck=jnxFruCheck, PYSNMP_MODULE_ID=jnxBoxAnatomy, jnxFruPowerOn=jnxFruPowerOn, jnxFruLastPowerOff=jnxFruLastPowerOff, jnxOperatingChassisDescr=jnxOperatingChassisDescr, jnxContentsL1Index=jnxContentsL1Index, jnxOperatingFRUPower=jnxOperatingFRUPower, jnxFmAsicErr=jnxFmAsicErr, jnxOverTemperature=jnxOverTemperature, jnxContentsLastChange=jnxContentsLastChange, jnxMountVarOffHardDiskFailed=jnxMountVarOffHardDiskFailed, jnxContentsL3Index=jnxContentsL3Index, jnxFruPsdAssignment=jnxFruPsdAssignment, jnxOperating5MinLoadAvg=jnxOperating5MinLoadAvg, jnxOperatingChassisId=jnxOperatingChassisId, jnxContentsTable=jnxContentsTable, jnxBoxSystemDomainType=jnxBoxSystemDomainType, jnxPowerSupplyOK=jnxPowerSupplyOK, jnxLEDTable=jnxLEDTable, jnxLEDAssociateIndex=jnxLEDAssociateIndex, jnxContentsContainerIndex=jnxContentsContainerIndex, jnxOperatingCPU=jnxOperatingCPU, jnxContentsInstalled=jnxContentsInstalled, jnxOperating5MinAvgCPU=jnxOperating5MinAvgCPU, jnxOperatingL2Index=jnxOperatingL2Index, jnxFruTable=jnxFruTable, jnxFmLinkErr=jnxFmLinkErr, jnxContainersCount=jnxContainersCount, jnxOperating1MinLoadAvg=jnxOperating1MinLoadAvg, jnxFruRemoval=jnxFruRemoval, jnxOperating15MinLoadAvg=jnxOperating15MinLoadAvg, jnxOperatingMemoryCP=jnxOperatingMemoryCP, jnxBoxRevision=jnxBoxRevision, jnxOperatingL1Index=jnxOperatingL1Index, jnxContainersEntry=jnxContainersEntry, jnxOperatingContentsIndex=jnxOperatingContentsIndex, jnxLEDStateOrdered=jnxLEDStateOrdered, jnxRedundancySwitchoverTime=jnxRedundancySwitchoverTime, jnxContentsType=jnxContentsType, jnxOperatingMemory=jnxOperatingMemory, jnxFilledTable=jnxFilledTable, jnxFmHealthChkErr=jnxFmHealthChkErr, jnxRedundancySwitchoverCount=jnxRedundancySwitchoverCount, jnxFruLastPowerOn=jnxFruLastPowerOn, jnxFmCellDropErr=jnxFmCellDropErr, jnxPowerSupplyInputOK=jnxPowerSupplyInputOK, jnxOperatingDRAMSize=jnxOperatingDRAMSize, jnxContentsEntry=jnxContentsEntry, jnxBoxKernelMemoryUsedPercent=jnxBoxKernelMemoryUsedPercent, jnxFilledContainerIndex=jnxFilledContainerIndex, jnxPlaneFault=jnxPlaneFault, jnxRedundancyEntry=jnxRedundancyEntry, jnxOperatingISR=jnxOperatingISR, jnxFilledLastChange=jnxFilledLastChange, jnxOperatingHeap=jnxOperatingHeap, jnxOperatingRestartTime=jnxOperatingRestartTime, jnxFruName=jnxFruName, jnxContentsDescr=jnxContentsDescr, jnxFruOfflineReason=jnxFruOfflineReason, jnxOperatingBuffer=jnxOperatingBuffer, jnxFruSlot=jnxFruSlot, jnxRedundancyConfig=jnxRedundancyConfig, jnxBoxPersonality=jnxBoxPersonality, jnxFruType=jnxFruType, jnxPowerSupplyFailure=jnxPowerSupplyFailure, jnxOperatingState=jnxOperatingState, JnxChassisId=JnxChassisId, jnxContentsPartNo=jnxContentsPartNo, jnxFruChassisId=jnxFruChassisId, jnxOperatingStateOrdered=jnxOperatingStateOrdered, jnxFruInsertion=jnxFruInsertion, jnxRedundancyL1Index=jnxRedundancyL1Index, jnxRedundancyKeepaliveHeartbeat=jnxRedundancyKeepaliveHeartbeat, jnxFilledState=jnxFilledState, jnxFilledL2Index=jnxFilledL2Index, jnxLEDL2Index=jnxLEDL2Index, jnxContainersDescr=jnxContainersDescr, jnxContainersView=jnxContainersView, jnxRedundancyTable=jnxRedundancyTable, jnxBoxDescr=jnxBoxDescr, jnxFruOnline=jnxFruOnline, jnxPlaneOnline=jnxPlaneOnline, jnxLEDState=jnxLEDState, jnxFruContentsIndex=jnxFruContentsIndex, jnxFilledL1Index=jnxFilledL1Index, jnxOperatingLastRestart=jnxOperatingLastRestart, jnxContentsChassisDescr=jnxContentsChassisDescr, jnxRedundancyKeepaliveLoss=jnxRedundancyKeepaliveLoss, jnxLEDL1Index=jnxLEDL1Index, jnxOperatingL3Index=jnxOperatingL3Index, jnxFanFailure=jnxFanFailure, jnxContentsModel=jnxContentsModel, jnxFruL2Index=jnxFruL2Index, jnxPlaneCheck=jnxPlaneCheck, jnxHardDiskMissing=jnxHardDiskMissing, jnxFanOK=jnxFanOK, jnxContainersTable=jnxContainersTable, jnxContentsChassisId=jnxContentsChassisId, jnxContentsL2Index=jnxContentsL2Index, jnxFruPowerUpTime=jnxFruPowerUpTime, jnxBootFromBackup=jnxBootFromBackup, jnxBoxInstalled=jnxBoxInstalled, jnxBoxAnatomy=jnxBoxAnatomy, jnxLEDOriginator=jnxLEDOriginator, jnxContainersLevel=jnxContainersLevel, jnxExtSrcLockLost=jnxExtSrcLockLost, jnxOperatingTemp=jnxOperatingTemp)

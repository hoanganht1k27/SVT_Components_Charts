#
# PySNMP MIB module JUNIPER-RPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/JUNIPER-RPM-MIB
# Produced by pysmi-0.3.2 at Mon Nov  5 15:16:43 2018
# On host Server platform Linux version 3.10.0-862.11.6.el7.x86_64 by user root
# Using Python version 2.7.5 (default, Jul 13 2018, 13:06:57) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
pingCtlTestName, pingCtlOwnerIndex, pingProbeHistoryIndex = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingCtlTestName", "pingCtlOwnerIndex", "pingProbeHistoryIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
jnxRpmMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxRpmMibRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
jnxRpmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1))
jnxRpmMib.setRevisions(('2007-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxRpmMib.setRevisionsDescriptions(('Initial definition.',))
if mibBuilder.loadTexts: jnxRpmMib.setLastUpdated('200703010000Z')
if mibBuilder.loadTexts: jnxRpmMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxRpmMib.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxRpmMib.setDescription('This mib provides data associated with the Realtime Performance Monitoring feature.')
class JnxRpmCollectionType(TextualConvention, Integer32):
    description = "Each RPM entry can maintain several collections of probes and provide separate calculations over each collection. The types of collections include: currentTest -- the test currently being executed lastCompletedTest -- the most recently completed test movingAverage -- the 'n' most recent probes (n is configurable) allTests -- all the probes (since the entry was last reset). Objects with this type identify a specific collection."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + SingleValueConstraint(1, 2, 3, 4)
    namedValues = NamedValues(("currentTest", 1), ("lastCompletedTest", 2), ("movingAverage", 3), ("allTests", 4))

class JnxRpmMeasurementType(TextualConvention, Integer32):
    description = "For each individual probe, several different measurements can be made. These include the following (all measurements are provided in units of microseconds): roundTripTime -- this is the delay between the the transmission of a probe and the arrival of its response. rttJitter -- this is the difference between the current round trip time measurement and the previous one. rttInterarrivalJitter -- An estimate of the statistical variance of a packet's interarrival time. Defined in rfc1889 as: J=J+(|D(i-1,i)|-J)/16 where J is the interarrival jitter and D(i-1, i) is the current round trip jitter measurement. egress -- this is the delay beween the transmission of a probe and its arrival at its destination. egressJitter -- this is the difference between the current egress delay the previous measurement. egressInterarrivalJitter -- similar to rttInterarrivalJitter, but applied to egress jitter measurements. ingress -- this is the delay between the transmission of a probe response and its arrival at its destination. ingressJitter -- this is the difference between the current ingress delay and the previous measurement. ingressInterarrivalJitter -- similar to rttInterarrivalJitter, but applied to ingress jitter measurements. Note, not all types of measurements will be performed for every probe. The jitter measurements are available only for those RPM entries that employ hardware timestamps. Further, the ingress & egress measurements are available only for those probe types that measure one-way delays or where hardware timestamps are employed and the one-way-hardware timestamp knob is enabled. In either case, the one-way delays must be less than the round trip times, otherwise they are discarded. Also note, due to clock synchronization artifacts, many one-way jitter measurements & calculations may include signifacant variations, in some cases orders of magnitude greater than the round trip times. Because of this, one-way jitter measurements will only be performed on samples which are less than 10 seconds apart."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9)
    namedValues = NamedValues(("roundTripTime", 1), ("rttJitter", 2), ("rttInterarrivalJitter", 3), ("egress", 4), ("egressJitter", 5), ("egressInterarrivalJitter", 6), ("ingress", 7), ("ingressJitter", 8), ("ingressInterarrivalJitter", 9))

class JnxRpmMeasurementSet(TextualConvention, Integer32):
    description = 'Over each collection of probes, RPM calculates statistics for several sets of measurements. These sets include the following: roundTripTime -- the set of round trip delays posRttJitter -- the set of positive round trip jitter measurements negRttJitter -- the set of negative round trip jitter measurements egress -- the set of outgoing (source to destination) one-way delays posEgressJitter -- the set of positive egress jitter measurements negEgressJitter -- the set of negative egress jitter measurements ingress -- the set of incoming (destination to source) one-way delays posIngressJitter -- the set of positive ingress jitter measurements negIngressJitter -- the set of negative ingress jitter measurements Objects with this type identify a specific set of measurements.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9)
    namedValues = NamedValues(("roundTripTime", 1), ("posRttJitter", 2), ("negRttJitter", 3), ("egress", 4), ("posEgressJitter", 5), ("negEgressJitter", 6), ("ingress", 7), ("posIngressJitter", 8), ("negIngressJitter", 9))

class JnxRpmTimestampType(TextualConvention, Integer32):
    description = 'This object identifies the type of timestamp used to obtain a measurement: software this indicates software based timestamps are used on both client and server. clientHardware this indicates hardware based timestamps are used on the RPM client. The RPM server is processed entirely in software. clientAndServerHardware this indicates hardware based timestamps are used on the RPM client and the server.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + SingleValueConstraint(1, 2, 3)
    namedValues = NamedValues(("software", 1), ("clientHardware", 2), ("clientAndServerHardware", 3))

jnxRpmResultsSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1), )
if mibBuilder.loadTexts: jnxRpmResultsSampleTable.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResultsSampleTable.setDescription('This table provides measurements from the latest individual RPM probe samples. Within each sample, the specific measurement type is identified by jnxRpmResSampleType. Note, if the latest probe was unsuccessful, no measurement types will be available. See the definition of JnxRpmMeasurementType for details on the types of measurements available.')
jnxRpmResultsSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSampleType"))
if mibBuilder.loadTexts: jnxRpmResultsSampleEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResultsSampleEntry.setDescription('Each entry provides a specific measurement type for a single probe.')
jnxRpmResSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 1), JnxRpmMeasurementType())
if mibBuilder.loadTexts: jnxRpmResSampleType.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSampleType.setDescription('This object identifies the specific measurement type returned by jnxRpmResSampleValue.')
jnxRpmResSampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleValue.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSampleValue.setDescription('This object returns the measurement identified by the corresponding jnxRpmResSampleType.')
jnxRpmResSampleTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 3), JnxRpmTimestampType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleTsType.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSampleTsType.setDescription('This object identifies the type of timestamp used to obtain this measurement.')
jnxRpmResSampleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSampleDate.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSampleDate.setDescription('This object provides the date and time of when this measurement was obtained.')
jnxRpmResultsSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2), )
if mibBuilder.loadTexts: jnxRpmResultsSummaryTable.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResultsSummaryTable.setDescription('This table provides a summary of the results for a specific RPM entry (identified by pingCtlOwnerIndex/pingCtlTestName). The scope of the summary is identified by jnxRpmResSumCollection.')
jnxRpmResultsSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSumCollection"))
if mibBuilder.loadTexts: jnxRpmResultsSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResultsSummaryEntry.setDescription("Each entry in the table provides a summary of the RPM results over a single collection of probes. For each RPM entry, there are several collections maintained: the current test, the most recently completed test, a configurable number of the most recent probes (aka 'moving average'), and a global collection representing all the probes. Each entry in this table summarizes the results for one of these collections.")
jnxRpmResSumCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 1), JnxRpmCollectionType())
if mibBuilder.loadTexts: jnxRpmResSumCollection.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSumCollection.setDescription('This object identifes the collection of probes over which the summary data represented by the other objects in this table applies. Note, if a collection type is not supported or not configured, it will not be instantiated in this table.')
jnxRpmResSumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumSent.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSumSent.setDescription('This object provides the number of probes sent within the collection identified by jnxRpmResSumCollection.')
jnxRpmResSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumReceived.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSumReceived.setDescription('This object provides the number of probes received within the collection identified by jnxRpmResSumCollection.')
jnxRpmResSumPercentLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumPercentLost.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSumPercentLost.setDescription('This object provides the percentage of probes lost within the collection identified by jnxRpmResSumCollection.')
jnxRpmResSumDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResSumDate.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResSumDate.setDescription('This object provides the date and time of when the most recent probe within the collection identified by jnxRpmResSumCollection was completed.')
jnxRpmResultsCalculatedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3), )
if mibBuilder.loadTexts: jnxRpmResultsCalculatedTable.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResultsCalculatedTable.setDescription('This table provides a set of calculated values for each RPM entry, for each collection of probes maintained within that entry, and for each supported measurement set within that collection of probes. Note, not all collection types will be available for every RPM Entry (identified by pingCtlOwnerIndex/pingCtlTestName). The jitter calculations are available only for those RPM entries that employ hardware timestamps. Further, the ingress & egress calculations are available only for those probe types that measure one-way delays or where hardware timestamps are employed and the one-way-hardware timestamp knob is enabled. In either case, the one-way delays must be less than the round trip times, otherwise they are discarded. Also, this table will skip over any measurement set for which there are 0 samples.')
jnxRpmResultsCalculatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "JUNIPER-RPM-MIB", "jnxRpmResSumCollection"), (0, "JUNIPER-RPM-MIB", "jnxRpmResCalcSet"))
if mibBuilder.loadTexts: jnxRpmResultsCalculatedEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResultsCalculatedEntry.setDescription('')
jnxRpmResCalcSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 1), JnxRpmMeasurementSet())
if mibBuilder.loadTexts: jnxRpmResCalcSet.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcSet.setDescription('This object identifies the measurement set upon which the calculations returned by the other objects in this table are based.')
jnxRpmResCalcSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcSamples.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcSamples.setDescription('The number of samples used in this calculations.')
jnxRpmResCalcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcMin.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcMin.setDescription('The minimum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmResCalcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcMax.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcMax.setDescription('The maximum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmResCalcAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcAverage.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcAverage.setDescription('The average of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmResCalcPkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcPkToPk.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcPkToPk.setDescription('The difference between the minimum and maximum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmResCalcStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcStdDev.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcStdDev.setDescription('The standard deviation calculated over all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmResCalcSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 3, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmResCalcSum.setStatus('current')
if mibBuilder.loadTexts: jnxRpmResCalcSum.setDescription('The sum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmHistorySampleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4), )
if mibBuilder.loadTexts: jnxRpmHistorySampleTable.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistorySampleTable.setDescription('This table provides measurements for individual RPM probe samples. In addition to the last completed sample, a configurable number of the most recent samples are available as well. Within each sample, the specific measurement type is identified by jnxRpmHistSampleType. Note, if probe was unsuccessful, no measurement types will be available for that history entry. See the definition of JnxRpmMeasurementType for details on the types of measurements available.')
jnxRpmHistorySampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSampleType"))
if mibBuilder.loadTexts: jnxRpmHistorySampleEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistorySampleEntry.setDescription('')
jnxRpmHistSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 1), JnxRpmMeasurementType())
if mibBuilder.loadTexts: jnxRpmHistSampleType.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistSampleType.setDescription('This object identifies the specific measurement type returned by jnxRpmHistSampleValue.')
jnxRpmHistSampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSampleValue.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistSampleValue.setDescription('This object returns the measurement identified by the corresponding jnxRpmHistSampleType.')
jnxRpmHistSampleTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 4, 1, 3), JnxRpmTimestampType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSampleTsType.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistSampleTsType.setDescription('This object identifies the type of timestamp used to obtain this measurement.')
jnxRpmHistorySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5), )
if mibBuilder.loadTexts: jnxRpmHistorySummaryTable.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistorySummaryTable.setDescription('This table provides historical summary data for each collection of probes within each RPM Entry, similar to the jnxRpmResultsSummaryTable. In addition to the current summary, this table provides the same number of historical entries as the jnxRpmHistorySampleTable.')
jnxRpmHistorySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSumCollection"))
if mibBuilder.loadTexts: jnxRpmHistorySummaryEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistorySummaryEntry.setDescription('')
jnxRpmHistSumCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 1), JnxRpmCollectionType())
if mibBuilder.loadTexts: jnxRpmHistSumCollection.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistSumCollection.setDescription('Identifies the collection of probes whose results are summarized by this row. At this time, historical summaries are available only for the current test (currentTest(1)).')
jnxRpmHistSumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumSent.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistSumSent.setDescription('This object provides the number of probes sent within the collection identified by jnxRpmHistSumCollection.')
jnxRpmHistSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumReceived.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistSumReceived.setDescription('This object provides the number of probes received within the collection identified by jnxRpmHistSumCollection.')
jnxRpmHistSumPercentLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistSumPercentLost.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistSumPercentLost.setDescription('This object provides the percentage of probes lost within the collection identified by jnxRpmHistSumCollection.')
jnxRpmHistoryCalculatedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6), )
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedTable.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedTable.setDescription('This table provides a set of calculated values for each RPM entry, for each collection of probes maintained within that entry, and for each supported calculated type within that collection of probes, similar to the jnxRpmResultsCalculatedTable. In addition to the current summary, this table provides the same number of historical entries as the jnxRpmHistorySampleTable.')
jnxRpmHistoryCalculatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "DISMAN-PING-MIB", "pingProbeHistoryIndex"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistSumCollection"), (0, "JUNIPER-RPM-MIB", "jnxRpmHistCalcSet"))
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistoryCalculatedEntry.setDescription('')
jnxRpmHistCalcSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 1), JnxRpmMeasurementSet())
if mibBuilder.loadTexts: jnxRpmHistCalcSet.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcSet.setDescription('This object identifies the measurement set upon which the calculations returned by the other objects in this table are based.')
jnxRpmHistCalcSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcSamples.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcSamples.setDescription('The number of samples used in this calculations.')
jnxRpmHistCalcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcMin.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcMin.setDescription('The minimum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmHistCalcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcMax.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcMax.setDescription('The maximum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmHistCalcAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcAverage.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcAverage.setDescription('The average of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmHistCalcPkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcPkToPk.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcPkToPk.setDescription('The difference between the minimum and maximum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmHistCalcStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcStdDev.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcStdDev.setDescription('The standard deviation calculated over all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
jnxRpmHistCalcSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 50, 1, 6, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpmHistCalcSum.setStatus('current')
if mibBuilder.loadTexts: jnxRpmHistCalcSum.setDescription('The sum of all the samples in the collection and measurement set associated with this row. Values are provided in units of microseconds.')
mibBuilder.exportSymbols("JUNIPER-RPM-MIB", jnxRpmResSumPercentLost=jnxRpmResSumPercentLost, jnxRpmResCalcMax=jnxRpmResCalcMax, jnxRpmHistorySampleEntry=jnxRpmHistorySampleEntry, JnxRpmTimestampType=JnxRpmTimestampType, JnxRpmCollectionType=JnxRpmCollectionType, jnxRpmResultsSampleEntry=jnxRpmResultsSampleEntry, jnxRpmResCalcStdDev=jnxRpmResCalcStdDev, jnxRpmResultsSummaryEntry=jnxRpmResultsSummaryEntry, jnxRpmResultsCalculatedEntry=jnxRpmResultsCalculatedEntry, jnxRpmResCalcSamples=jnxRpmResCalcSamples, PYSNMP_MODULE_ID=jnxRpmMib, jnxRpmResSumDate=jnxRpmResSumDate, jnxRpmHistSampleValue=jnxRpmHistSampleValue, jnxRpmResultsSummaryTable=jnxRpmResultsSummaryTable, JnxRpmMeasurementSet=JnxRpmMeasurementSet, jnxRpmResSumCollection=jnxRpmResSumCollection, jnxRpmResSumReceived=jnxRpmResSumReceived, jnxRpmResSampleTsType=jnxRpmResSampleTsType, jnxRpmHistoryCalculatedTable=jnxRpmHistoryCalculatedTable, JnxRpmMeasurementType=JnxRpmMeasurementType, jnxRpmHistCalcStdDev=jnxRpmHistCalcStdDev, jnxRpmResCalcSet=jnxRpmResCalcSet, jnxRpmResCalcAverage=jnxRpmResCalcAverage, jnxRpmMib=jnxRpmMib, jnxRpmHistCalcSum=jnxRpmHistCalcSum, jnxRpmHistorySummaryTable=jnxRpmHistorySummaryTable, jnxRpmHistCalcPkToPk=jnxRpmHistCalcPkToPk, jnxRpmResCalcPkToPk=jnxRpmResCalcPkToPk, jnxRpmResSampleValue=jnxRpmResSampleValue, jnxRpmResCalcMin=jnxRpmResCalcMin, jnxRpmHistCalcMin=jnxRpmHistCalcMin, jnxRpmResCalcSum=jnxRpmResCalcSum, jnxRpmResSampleType=jnxRpmResSampleType, jnxRpmResultsCalculatedTable=jnxRpmResultsCalculatedTable, jnxRpmHistorySummaryEntry=jnxRpmHistorySummaryEntry, jnxRpmHistSampleTsType=jnxRpmHistSampleTsType, jnxRpmResultsSampleTable=jnxRpmResultsSampleTable, jnxRpmHistCalcAverage=jnxRpmHistCalcAverage, jnxRpmHistSumReceived=jnxRpmHistSumReceived, jnxRpmHistSumSent=jnxRpmHistSumSent, jnxRpmHistoryCalculatedEntry=jnxRpmHistoryCalculatedEntry, jnxRpmHistSumCollection=jnxRpmHistSumCollection, jnxRpmResSampleDate=jnxRpmResSampleDate, jnxRpmHistorySampleTable=jnxRpmHistorySampleTable, jnxRpmHistCalcSamples=jnxRpmHistCalcSamples, jnxRpmHistCalcMax=jnxRpmHistCalcMax, jnxRpmHistSampleType=jnxRpmHistSampleType, jnxRpmResSumSent=jnxRpmResSumSent, jnxRpmHistSumPercentLost=jnxRpmHistSumPercentLost, jnxRpmHistCalcSet=jnxRpmHistCalcSet)

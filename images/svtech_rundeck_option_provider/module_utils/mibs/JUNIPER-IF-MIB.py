#
# PySNMP MIB module JUNIPER-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///usr/share/snmp/mibs/mib-jnx-if-extensions.txt
# Produced by pysmi-0.3.2 at Mon Nov  5 17:03:41 2018
# On host Server platform Linux version 3.10.0-862.11.6.el7.x86_64 by user root
# Using Python version 2.7.5 (default, Jul 13 2018, 13:06:57) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, ifEntry = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifEntry")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
ifJnx = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 3))
ifJnx.setRevisions(('2011-05-10 00:00', '2011-09-22 00:00', '2007-06-05 00:00', '2002-10-31 00:00', '2001-06-21 00:00', '2001-03-15 00:00', '2015-10-15 00:00',))
if mibBuilder.loadTexts: ifJnx.setLastUpdated('201109221523Z')
if mibBuilder.loadTexts: ifJnx.setOrganization('Juniper Networks, Inc.')
ifJnxTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1), )
if mibBuilder.loadTexts: ifJnxTable.setStatus('current')
ifJnxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1), )
ifEntry.registerAugmentions(("JUNIPER-IF-MIB", "ifJnxEntry"))
ifJnxEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: ifJnxEntry.setStatus('current')
ifIn1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIn1SecRate.setStatus('current')
ifIn1SecOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIn1SecOctets.setStatus('current')
ifIn1SecPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIn1SecPkts.setStatus('current')
ifOut1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOut1SecRate.setStatus('current')
ifOut1SecOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOut1SecOctets.setStatus('current')
ifOut1SecPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOut1SecPkts.setStatus('current')
ifHCIn1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHCIn1SecRate.setStatus('current')
ifHCOut1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHCOut1SecRate.setStatus('current')
ifJnxInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInErrors.setStatus('current')
ifJnxInFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInFrameErrors.setStatus('current')
ifJnxInQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInQDrops.setStatus('current')
ifJnxInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInRunts.setStatus('current')
ifJnxInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInGiants.setStatus('current')
ifJnxInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInDiscards.setStatus('current')
ifJnxInHslCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInHslCrcErrors.setStatus('current')
ifJnxInHslFifoOverFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInHslFifoOverFlows.setStatus('current')
ifJnxInL3Incompletes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInL3Incompletes.setStatus('current')
ifJnxInL2ChanErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInL2ChanErrors.setStatus('current')
ifJnxInL2MismatchTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInL2MismatchTimeouts.setStatus('current')
ifJnxInInvalidVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInInvalidVCs.setStatus('current')
ifJnxInFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInFifoErrors.setStatus('current')
ifJnxBucketDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxBucketDrops.setStatus('current')
ifJnxSramErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxSramErrors.setStatus('current')
ifJnxOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutErrors.setStatus('current')
ifJnxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxCollisions.setStatus('current')
ifJnxCarrierTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxCarrierTrans.setStatus('current')
ifJnxOutQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutQDrops.setStatus('current')
ifJnxOutAgedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutAgedErrors.setStatus('current')
ifJnxOutFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutFifoErrors.setStatus('current')
ifJnxOutHslFifoUnderFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutHslFifoUnderFlows.setStatus('current')
ifJnxOutHslCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutHslCrcErrors.setStatus('current')
ifJnxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxCrcErrors.setStatus('current')
ifJnxFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxFcsErrors.setStatus('current')
ifHCIn1SecOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHCIn1SecOctets.setStatus('current')
ifHCOut1SecOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 1, 1, 35), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHCOut1SecOctets.setStatus('current')
ifChassisTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2), )
if mibBuilder.loadTexts: ifChassisTable.setStatus('current')
ifChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2, 1), )
ifEntry.registerAugmentions(("JUNIPER-IF-MIB", "ifChassisEntry"))
ifChassisEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: ifChassisEntry.setStatus('current')
ifChassisFpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifChassisFpc.setStatus('current')
ifChassisPic = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifChassisPic.setStatus('current')
ifChassisPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifChassisPort.setStatus('current')
ifChassisChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifChassisChannel.setStatus('current')
ifChassisLogicalUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifChassisLogicalUnit.setStatus('current')
ifChassisPicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifChassisPicIndex.setStatus('current')
ifJnxNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 3, 3))
ifJnxNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 3, 3, 0))
ifJnxErrors = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 3, 3, 0, 1)).setObjects(("JUNIPER-IF-MIB", "ifJnxCrcErrors"), ("JUNIPER-IF-MIB", "ifJnxFcsErrors"))
if mibBuilder.loadTexts: ifJnxErrors.setStatus('current')
ifJnxPolTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4), )
if mibBuilder.loadTexts: ifJnxPolTable.setStatus('current')
ifJnxPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifJnxPolEntry.setStatus('current')
ifJnxInPolLowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolLowOctets.setStatus('current')
ifJnxInPolLowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolLowPkts.setStatus('current')
ifJnxInPolLow1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolLow1SecRate.setStatus('current')
ifJnxInPolMLowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolMLowOctets.setStatus('current')
ifJnxInPolMLowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolMLowPkts.setStatus('current')
ifJnxInPolMLow1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolMLow1SecRate.setStatus('current')
ifJnxInPolMHighOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolMHighOctets.setStatus('current')
ifJnxInPolMHighPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolMHighPkts.setStatus('current')
ifJnxInPolMHigh1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolMHigh1SecRate.setStatus('current')
ifJnxInPolHighOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolHighOctets.setStatus('current')
ifJnxInPolHighPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolHighPkts.setStatus('current')
ifJnxInPolHigh1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolHigh1SecRate.setStatus('current')
ifJnxInPolDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolDropOctets.setStatus('current')
ifJnxInPolDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolDropPkts.setStatus('current')
ifJnxInPolDrop1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxInPolDrop1SecRate.setStatus('current')
ifJnxOutPolLowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolLowOctets.setStatus('current')
ifJnxOutPolLowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolLowPkts.setStatus('current')
ifJnxOutPolLow1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolLow1SecRate.setStatus('current')
ifJnxOutPolMLowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolMLowOctets.setStatus('current')
ifJnxOutPolMLowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolMLowPkts.setStatus('current')
ifJnxOutPolMLow1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolMLow1SecRate.setStatus('current')
ifJnxOutPolMHighOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolMHighOctets.setStatus('current')
ifJnxOutPolMHighPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolMHighPkts.setStatus('current')
ifJnxOutPolMHigh1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolMHigh1SecRate.setStatus('current')
ifJnxOutPolHighOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolHighOctets.setStatus('current')
ifJnxOutPolHighPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolHighPkts.setStatus('current')
ifJnxOutPolHigh1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolHigh1SecRate.setStatus('current')
ifJnxOutPolDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolDropOctets.setStatus('current')
ifJnxOutPolDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolDropPkts.setStatus('current')
ifJnxOutPolDrop1SecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJnxOutPolDrop1SecRate.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-IF-MIB", ifJnxInPolLowPkts=ifJnxInPolLowPkts, ifJnxInPolDrop1SecRate=ifJnxInPolDrop1SecRate, ifJnxOutPolMHighOctets=ifJnxOutPolMHighOctets, ifChassisFpc=ifChassisFpc, ifJnxInRunts=ifJnxInRunts, ifJnxInPolMLowOctets=ifJnxInPolMLowOctets, ifHCIn1SecRate=ifHCIn1SecRate, ifJnxOutPolMLow1SecRate=ifJnxOutPolMLow1SecRate, ifJnxInPolLowOctets=ifJnxInPolLowOctets, ifJnxInHslCrcErrors=ifJnxInHslCrcErrors, ifJnxInL2MismatchTimeouts=ifJnxInL2MismatchTimeouts, ifChassisPort=ifChassisPort, ifJnxNotificationPrefix=ifJnxNotificationPrefix, ifJnxInPolMHigh1SecRate=ifJnxInPolMHigh1SecRate, ifJnxOutPolDropOctets=ifJnxOutPolDropOctets, ifJnxInPolDropOctets=ifJnxInPolDropOctets, ifJnxCrcErrors=ifJnxCrcErrors, ifJnxInPolHighPkts=ifJnxInPolHighPkts, ifJnxPolTable=ifJnxPolTable, ifIn1SecRate=ifIn1SecRate, ifHCIn1SecOctets=ifHCIn1SecOctets, ifJnxInFifoErrors=ifJnxInFifoErrors, ifJnx=ifJnx, ifJnxOutPolMLowOctets=ifJnxOutPolMLowOctets, ifOut1SecOctets=ifOut1SecOctets, ifOut1SecRate=ifOut1SecRate, ifJnxTable=ifJnxTable, ifIn1SecPkts=ifIn1SecPkts, ifChassisTable=ifChassisTable, ifJnxCollisions=ifJnxCollisions, ifJnxOutErrors=ifJnxOutErrors, ifChassisLogicalUnit=ifChassisLogicalUnit, ifJnxInL3Incompletes=ifJnxInL3Incompletes, ifJnxInPolHigh1SecRate=ifJnxInPolHigh1SecRate, ifJnxInPolMHighOctets=ifJnxInPolMHighOctets, ifOut1SecPkts=ifOut1SecPkts, ifJnxOutPolLow1SecRate=ifJnxOutPolLow1SecRate, ifJnxInQDrops=ifJnxInQDrops, ifJnxOutPolDrop1SecRate=ifJnxOutPolDrop1SecRate, ifJnxOutPolMHighPkts=ifJnxOutPolMHighPkts, ifJnxInPolLow1SecRate=ifJnxInPolLow1SecRate, ifJnxErrors=ifJnxErrors, ifJnxOutPolLowOctets=ifJnxOutPolLowOctets, ifJnxInL2ChanErrors=ifJnxInL2ChanErrors, ifJnxOutPolMLowPkts=ifJnxOutPolMLowPkts, ifHCOut1SecOctets=ifHCOut1SecOctets, ifJnxOutFifoErrors=ifJnxOutFifoErrors, ifJnxInPolMHighPkts=ifJnxInPolMHighPkts, ifJnxOutPolMHigh1SecRate=ifJnxOutPolMHigh1SecRate, ifJnxInHslFifoOverFlows=ifJnxInHslFifoOverFlows, ifJnxInPolDropPkts=ifJnxInPolDropPkts, ifJnxPolEntry=ifJnxPolEntry, ifJnxOutPolHighOctets=ifJnxOutPolHighOctets, ifJnxOutHslCrcErrors=ifJnxOutHslCrcErrors, ifJnxOutPolDropPkts=ifJnxOutPolDropPkts, ifJnxInPolMLowPkts=ifJnxInPolMLowPkts, ifJnxOutHslFifoUnderFlows=ifJnxOutHslFifoUnderFlows, ifJnxOutPolLowPkts=ifJnxOutPolLowPkts, ifJnxInFrameErrors=ifJnxInFrameErrors, ifJnxInInvalidVCs=ifJnxInInvalidVCs, PYSNMP_MODULE_ID=ifJnx, ifHCOut1SecRate=ifHCOut1SecRate, ifJnxEntry=ifJnxEntry, ifJnxInDiscards=ifJnxInDiscards, ifJnxCarrierTrans=ifJnxCarrierTrans, ifJnxInErrors=ifJnxInErrors, ifJnxSramErrors=ifJnxSramErrors, ifChassisChannel=ifChassisChannel, ifJnxOutAgedErrors=ifJnxOutAgedErrors, ifChassisPicIndex=ifChassisPicIndex, ifJnxOutPolHighPkts=ifJnxOutPolHighPkts, ifJnxInPolHighOctets=ifJnxInPolHighOctets, ifJnxNotification=ifJnxNotification, ifJnxInGiants=ifJnxInGiants, ifJnxBucketDrops=ifJnxBucketDrops, ifJnxFcsErrors=ifJnxFcsErrors, ifChassisPic=ifChassisPic, ifIn1SecOctets=ifIn1SecOctets, ifJnxInPolMLow1SecRate=ifJnxInPolMLow1SecRate, ifJnxOutPolHigh1SecRate=ifJnxOutPolHigh1SecRate, ifJnxOutQDrops=ifJnxOutQDrops, ifChassisEntry=ifChassisEntry)

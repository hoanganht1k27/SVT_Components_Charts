apiVersion: batch/v1
kind: Job
metadata:
  name: "init-repo"
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}

spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: init-repo
        image: {{ template "initRepo.image" . }}
        imagePullPolicy: {{ .Values.initRepo.pullPolicy | quote }}
        command:
          - bash
          - -ec
          - |
              eval "list_repo=(`echo $REPO_LIST | tr "," " "`)"
              for item in "${list_repo[@]}"; do
                  name=`echo $item | sed  "s/:.*//"`
                  if [[ "$item" =~ .*":".* ]]; then
                      tag=`echo $item | sed  "s/^.*://"`
                  else
                      tag=""
                  fi
                  mkdir -p /opt/$name
                  status=`ls -A /opt/$name | grep -v 'lost+found' | grep -v '.stfolder' | grep -v 'addition_toolkit' | wc -l`
                  if [[ "$status" == "0" ]]; then
                      echo "/opt/$name is Empty. Clone repo"
                      cd /opt/$name && \
                      git init
                      git remote add origin https://${GH_TOKEN}@github.com/${GH_USERNAME}/${name}.git
                      git pull origin master --depth=1
                      if [ $? == 0 ]; then
                          echo "Clone ${name} done !"
                          echo "true" > completed
                      fi

                      if [[ "$tag" == "latest" ]]; then
                          cd /opt/$name 
                          # Get the commit ID of latest tag
                          commit_id=$(git rev-list --tags --max-count=1 --remotes)
                          # Fetch the latest tag
                          git fetch --depth 1 origin tag `git ls-remote --tags --quiet |grep "$commit_id" | awk '{print $2}' | sed 's:.*/::'` --no-tags
                          # Checkout the latest tag
                          git checkout tags/$(git describe --tags $commit_id)
                          echo "Checkout latest tag done!"
                      elif [[ "$tag" != "latest" ]] && [[ "$tag" != "" ]] && [[ "$tag" != "None" ]]; then
                          cd /opt/$name 
                          # Fetch specific tag
                          git fetch --depth 1 origin tag `git ls-remote --tags --quiet |grep "$tag" | awk '{print $2}' | sed 's:.*/::'` --no-tags
                          # Checkout specific tag
                          git checkout tags/$(git describe --tags `git rev-list --tags --max-count=1`)
                          echo "Checkout $tag done!"
                      fi
             
                      # Clearing the token from repository
                      git remote remove origin
                      git remote add origin https://github.com/${GH_USERNAME}/${name}.git

                  else
                      echo "/opt/$name is not Empty. Ignore"
                  fi
              done
        env:
          - name: GH_TOKEN
            valueFrom:
              secretKeyRef:
                name: gh-token
                key: GH_TOKEN
                optional: false
          - name: GH_USERNAME
            value: {{ .Values.initRepo.GH_USERNAME | quote }}
          - name: REPO_LIST
            value: {{ .Values.initRepo.repoList | quote }}

      {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
        volumeMounts:
          {{- range .Values.global.sharedPersistenceVolume }}

          {{- if has "preparation" .shareFor }}
          - name: {{ .volumeName }}
            mountPath: {{ .path }}
          {{- end }}

          {{- end }}

      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}  

      volumes:
        {{- range .Values.global.sharedPersistenceVolume }}

        {{- if has "preparation" .shareFor }}
        - name: {{ .volumeName }}
          persistentVolumeClaim:
            claimName: {{ .pvcName }}
        {{- end }}

        {{- end }}


      {{- end  }}

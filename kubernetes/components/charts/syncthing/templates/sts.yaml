apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels: {{- include "common.labels.standard" . | nindent 4 }}
  name: {{ include "common.names.fullname" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: "syncthing-headless"
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.matchLabels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      initContainers:
      - name: init-syncthing
        image: busybox
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
          - /bin/sh
          - -c
          - |
            if [ -d "/var/syncthing/syncthing_config/$HOSTNAME" ]; then
              echo "[INIT-INFO] - Directory /var/syncthing/syncthing_config/$HOSTNAME is existed"
              echo "[INIT-INFO] - Coping /var/syncthing/syncthing_config/$HOSTNAME to /var/syncthing/config"
              /bin/cp -a  /var/syncthing/syncthing_config/$HOSTNAME/* /var/syncthing/config
            else
              echo "[INIT-INFO] - Directory /var/syncthing/syncthing_config/$HOSTNAME is not existed. The default configurations will be generated"
            fi
        volumeMounts:
        - name: syncthing-hostpath
          mountPath: /var/syncthing
      containers:
      - image: busybox
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
          - /bin/sh
          - -c
          - |
            echo "[SIDECAR-INFO] - Waiting until \"syncthing_config\" folder is created"
            while [ ! -d /var/syncthing/syncthing_config ]; do sleep 60; done
            echo "[SIDECAR-INFO] - Folder \"syncthing_config\" is existed"
            if [ ! -d /var/syncthing/syncthing_config/$HOSTNAME ]; then
               echo "[SIDECAR-INFO] - Creating /var/syncthing/syncthing_config/$HOSTNAME if it's not existed"
               mkdir -p /var/syncthing/syncthing_config/$HOSTNAME
            fi
            while true; do for i in `ls -A /var/syncthing/config/ | grep -v "index*"`; do cp -a /var/syncthing/config/$i /var/syncthing/syncthing_config/$HOSTNAME; done; sleep 120; done
        name: sidecar-syncthing
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        volumeMounts:
        - name: syncthing-hostpath
          mountPath: /var/syncthing
      - name: syncthing
        resources: {}
        image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
        - name: STGUIAPIKEY
          valueFrom:
            secretKeyRef:
              name:  {{ template "common.names.fullname" . }}
              key: ui-password
        - name: PCAP
          value: "cap_chown,cap_fowner+ep"
        - name: PUID
          value: "0"
        - name: PGID
          value: "0"
        - name: HEADLESS_SERVICE_NAME
          value: "syncthing-headless"
        - name: LIST_FOLDER
          value: {{ .Values.env.LIST_FOLDER }}
        ports:
        - containerPort: 8384
          name: http
          protocol: TCP
        - containerPort: 21027
          name: discovery
          protocol: UDP
        - containerPort: 20000
          name: transfertcp
          protocol: TCP
        - containerPort: 20000
          name: transferudp
          protocol: UDP
        readinessProbe:
          httpGet:
            path: /rest/noauth/health
            port: 8384
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 3
          failureThreshold: 10
        volumeMounts:
        - name: syncthing-hostpath
          mountPath: /var/syncthing

      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}

      volumes:
      - name: syncthing-hostpath
        hostPath:
          # path: /opt/shared/
          path: {{ .Values.global.basePath }}{{ .Release.Namespace }}
          type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  labels: {{- include "common.labels.standard" . | nindent 4 }}
  name: syncthing-headless
spec:
  publishNotReadyAddresses: true
  ports:
  - name: discovery
    port: 21027
    targetPort: 21027
  - name: file-transfer-udp
    port: 22000
    protocol: UDP
    targetPort: 22000
  - name: file-transfer-tcp
    port: 22000
    protocol: TCP
    targetPort: 22000
  selector: {{- include "common.labels.matchLabels" . | nindent 4 }}
  type:  {{ .Values.service.type }}
  clusterIP: {{ .Values.service.clusterIP }}
